using System.Collections.Generic;

namespace AddressUtility.Models.Extra
{
    // Этот класс нужен, чтобы сопоставить адресные атомы с типами,
    // потому что в базе в таблицах с типами и атомами нет внешних ключей и нет таблицы для сопоставления их между собой
    public static class AtomTypeMappings
    {
        private static readonly (byte AtomId, byte TypeId)[] _mapping =
        {
            (1, 5),
            (2, 4),
            (3, 4),
            (4, 4),
            (5, 4),
            (6, 4),
            (7, 4),
            (8, 4),
            (9, 4),
            (10, 4),
            (11, 4),
            (12, 3),
            (13, 3),
            (13, 9),
            (14, 3),
            (15, 3),
            (16, 2),
            (17, 3),
            (18, 4),
            (19, 4),
            (20, 6),
            (21, 10),
            (22, 2),
            (23, 3),
            (24, 3),
            (25, 4),
            (26, 3),
            (27, 3),
            (28, 4),
            (29, 3),
            (30, 3),
            (31, 4),
            (32, 3),
            (33, 3),
            (34, 6),
            (35, 6),
            (36, 3),
            (37, 4),
            (38, 4),
            (39, 4),
            (40, 4),
            (41, 6),
            (42, 4),
            (43, 4),
            (44, 4),
            (45, 4),
            (46, 4),
            (47, 4),
            (48, 3),
            (49, 11),
            (51, 4),
            (52, 4),
            (53, 4),
            (54, 11),
            (55, 4),
            (56, 3),
            (57, 3),
            (58, 4),
            (59, 3),
            (60, 3),
            (61, 6),
            (62, 3),
            (63, 3),
            (64, 3),
            (65, 3),
            (66, 4),
            (67, 4),
            (68, 3),
            (69, 2),
            (70, 2),
            (71, 4),
            (72, 4),
            (73, 4),
            (74, 11),
            (75, 10),
            (76, 3)
        };

        public static IEnumerable<(byte AtomId, byte TypeId)> GetMapping()
            => _mapping;
    }
}
